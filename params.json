{
  "name": "Artwishlist Definitions and Workflows",
  "tagline": "Code Manifesto, Best Practices, Do's and Dont's",
  "body": "# Definitions\r\n\r\n### Roles:\r\n* Stakeholders (Christian, Dimitris)\r\n* Product Owners (Romanos)\r\n* In-house Dev team (Romanos, Apostolis)\r\n* Devs (Apostolis, Romanos, Freelancers)\r\n\r\n\u000B### Pivotal:\r\n* Finished -> Done all commits\r\n* Delivered -> Pushed to develop and deployed on staging\r\n* Accepted -> All works fine, pushed to master and deployed to production\r\n\r\n### Code Manifesto (CM)\r\n1. Create new branch feat/story-name or fix/story-name or chore/story-name\r\n2. Always rebase\r\n3. Always include in commits [#story-id]\r\n4. On last commit [Finishes #story-id]\r\n5. Create tests (Unit, Functional, Behavioral Tests)\r\n6. Good naming classes/methods/variables\r\n7. Create comments for where it gets too complicated\r\n8. Run http://rubocop.readthedocs.io/en/ against all RoR file changes\r\n9. Run http://www.coffeelint.org/ against all Coffeescript file changes\r\n10. Run https://github.com/brigade/scss-lint against all SCSS file changes\r\n\r\n### Code Review (CR)\r\n1. Is code readable\r\n  1. Good naming classes/methods/variables\r\n  2. Create comments for where it gets too complicated\r\n2. Is OOP used?\r\n3. Check code security\r\n4. Check code performance\r\n\r\n### Security Best Practices:\r\n* Enable and enforce 2WA wherever possible\r\n* Regenerate passwords and API tokens whenever a collaborator leaves or/and every month\r\n* Roles and Accounts in AWS, Github, PivotalTracker, Apps. Everyone is responsible for his/her own actions\r\n\r\n# Work Flow Protocol\r\n\r\n### Stakeholders:\r\n1. Check for Bugs\r\n2. Determine new Features\r\n3. Create Roadmap\r\n\r\n### Stakeholders + Product Owners:\r\n1. Provide product owner with docs, images, general requirements\r\n2. Set priorities on which features are most needed\r\n3. Check functionality on staging\r\n4. Mark story as Accepted\r\n\r\n### Product Owners:\r\n1. Create Epics\r\n2. Create New Pivotal Stories\r\n  1. Gather all information regarding the 'issue'\r\n  2. Almost all stories should be part of an epic\r\n  3. A new story should be as small as possible\r\n  4. Add subtasks in each story (fat subtasks, thin description)\r\n  5. Provide examples and images/docs whenever possible\r\n3. Assign stories to Devs\r\n\r\n### In-house Dev team:\r\n1. Calculates and add Points for stories\r\n2. Accept pull request (Review)\r\n3. Mark story as delivered\r\n4. Deploy on staging\r\n5. Check functionality on staging\r\n6. Push code to master\r\n7. Deploy on master\r\n\r\n### Devs:\r\n1. Communicate subtasks modification on pivotal:\r\n  1. Change subtasks as needed\r\n  2. Writing explanation why a change was needed as comment with reference to requester\r\n  3. Continue working until feedback\r\n2. Writes code according to Code Manifesto (CM)\r\n3. Pull requests to develop branch",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}